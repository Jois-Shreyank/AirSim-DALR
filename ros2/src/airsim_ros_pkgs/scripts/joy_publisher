#!/usr/bin/env python3

import rclpy
from rclpy.node import Node

from sensor_msgs.msg import Joy

from tkinter import Tk, Listbox, Button, Label, StringVar
import threading

class JoyRepublisher(Node):
    def __init__(self):
        super().__init__('joy_republisher')

        # List of available cars
        self.declare_parameter('available_cars', ['Car_1', 'Car_2', 'Car_3'])
        self.available_cars = self.get_parameter('available_cars').value

        self.current_car_name = None  # Initially, no car is selected

        # Start the GUI in a separate thread
        gui_thread = threading.Thread(target=self.start_gui)
        gui_thread.daemon = True
        gui_thread.start()

        # Create a subscriber to the /exomy/joy topic
        self.joy_sub = self.create_subscription(
            Joy,
            '/exomy/joy',
            self.joy_callback,
            10
        )

        # Dictionary to store publishers for each car
        self.car_publishers = {}

        # Initialize publishers for available cars
        for car in self.available_cars:
            topic = f'/{car}/joy'
            publisher = self.create_publisher(Joy, topic, 10)
            self.car_publishers[car] = publisher
            self.get_logger().info(f"Initialized publisher for {car} on topic {topic}")

    def start_gui(self):
        """Start the GUI for selecting cars."""
        root = Tk()
        root.title("Car Selector")

        current_car_var = StringVar(root)
        if self.available_cars:
            current_car_var.set(self.available_cars[0])  # Default to the first car
            self.current_car_name = self.available_cars[0]
        else:
            current_car_var.set('No cars available')

        Label(root, text="Available Cars:").pack()

        listbox = Listbox(root)
        listbox.pack()

        for car in self.available_cars:
            listbox.insert('end', car)

        def switch_car():
            """Switch to the selected car."""
            selected = listbox.curselection()
            if selected:
                selected_car = self.available_cars[selected[0]]
                self.current_car_name = selected_car
                current_car_var.set(selected_car)
                self.get_logger().info(f"Switched to {selected_car}")

        Button(root, text="Switch Car", command=switch_car).pack()
        Label(root, textvariable=current_car_var).pack()

        root.mainloop()

    def joy_callback(self, msg):
        """Callback function for joystick messages."""
        if self.current_car_name is None:
            self.get_logger().info("No car selected.")
            return

        publisher = self.car_publishers.get(self.current_car_name)
        if publisher is None:
            self.get_logger().info(f"No publisher for {self.current_car_name}")
            return

        # Publish the joystick message to the selected car's topic
        publisher.publish(msg)
        self.get_logger().info(f"Republished joystick message to {self.current_car_name}/joy")

def main(args=None):
    rclpy.init(args=args)
    node = JoyRepublisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Shutting down JoyRepublisher node.")
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
