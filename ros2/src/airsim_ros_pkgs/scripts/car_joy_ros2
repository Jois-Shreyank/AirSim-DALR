#!/usr/bin/env python3

# Capture joystick events using ROS2 and convert them to AirSim Car API commands
# To enable:
# ros2 run joy joy_node

import rclpy
from rclpy.node import Node
import threading
from sensor_msgs.msg import Joy
from airsim_interfaces.msg import CarControls


class CarCommandTranslator(Node):
    def __init__(self):
        super().__init__('car_joy')

        self.lock = threading.Lock()

        self.last_forward_btn = 0
        self.last_reverse_btn = 0
        self.last_neutral_btn = 0
        self.last_park_btn = 0
        self.last_shift_down_btn = 0
        self.last_shift_up_btn = 0
        self.parked = True
        self.last_gear = 0
        self.shift_mode_manual = True

        # Declare and get parameters
        self.declare_parameter('update_rate_hz', 20.0)
        self.declare_parameter('max_curvature', 0.75)
        self.declare_parameter('steer_sign', -1)
        self.declare_parameter('throttle_brake_sign', 1)
        self.declare_parameter('auto_gear_max', 5)
        self.declare_parameter('manual_transmission', True)
        self.declare_parameter('forward_button_index', 0)
        self.declare_parameter('reverse_button_index', 1)
        self.declare_parameter('neutral_button_index', 2)
        self.declare_parameter('park_button_index', 3)
        self.declare_parameter('shift_down_index', 4)
        self.declare_parameter('shift_up_index', 5)
        self.declare_parameter('car_control_topic', '/airsim_node/Car_1/car_cmd')

        update_rate_hz = self.get_parameter('update_rate_hz').value
        self.max_curvature = self.get_parameter('max_curvature').value
        self.steer_sign = self.get_parameter('steer_sign').value
        self.throttle_brake_sign = self.get_parameter('throttle_brake_sign').value
        self.auto_gear_max = self.get_parameter('auto_gear_max').value
        self.manual_transmission = self.get_parameter('manual_transmission').value
        self.forward_btn_index = self.get_parameter('forward_button_index').value
        self.reverse_btn_index = self.get_parameter('reverse_button_index').value
        self.neutral_btn_index = self.get_parameter('neutral_button_index').value
        self.park_btn_index = self.get_parameter('park_button_index').value
        self.shift_down_btn_index = self.get_parameter('shift_down_index').value
        self.shift_up_btn_index = self.get_parameter('shift_up_index').value
        car_control_topic = self.get_parameter('car_control_topic').value

        self.joy_msg = None

        # Create subscriber for joystick messages
        self.joy_sub = self.create_subscription(
            Joy,
            'exomy/joy',
            self.handle_joy,
            10  # QoS history depth
        )

        # Create publisher for car control messages
        self.command_pub = self.create_publisher(
            CarControls,
            car_control_topic,
            10  # QoS history depth
        )

        # Create a timer to periodically update the car controls
        self.update_timer = self.create_timer(
            1.0 / update_rate_hz,
            self.handle_update_timer
        )

    def handle_joy(self, msg):
        with self.lock:
            self.joy_msg = msg

    def handle_update_timer(self):
        with self.lock:
            joy = self.joy_msg

        if joy is None:
            return

        controls = CarControls()

        # Steering control
        controls.steering = self.steer_sign * self.max_curvature * joy.axes[2]

        # Throttle and brake control
        u = joy.axes[1] * self.throttle_brake_sign
        if u > 0.0:
            controls.throttle = abs(u)
            controls.brake = 0.0
        else:
            controls.throttle = 0.0
            controls.brake = abs(u)

        # Button states
        forward_btn = joy.buttons[self.forward_btn_index]
        reverse_btn = joy.buttons[self.reverse_btn_index]
        neutral_btn = joy.buttons[self.neutral_btn_index]
        park_btn = joy.buttons[self.park_btn_index]
        shift_up_btn = joy.buttons[self.shift_up_btn_index]
        shift_down_btn = joy.buttons[self.shift_down_btn_index]

        # Gear shifting logic
        controls.manual = True  # Set to False for automatic transmission
        if not self.last_neutral_btn and neutral_btn:
            self.last_gear = 0
            self.parked = False
            controls.manual = True
        elif not self.last_forward_btn and forward_btn:
            if self.manual_transmission:
                self.last_gear = 1
                self.shift_mode_manual = True
            else:
                self.shift_mode_manual = False
                self.last_gear = self.auto_gear_max
            self.parked = False
        elif not self.last_reverse_btn and reverse_btn:
            self.last_gear = -1
            self.parked = False
            self.shift_mode_manual = True
        elif not self.last_park_btn and park_btn:
            self.parked = True
        elif not self.last_shift_down_btn and shift_down_btn and self.last_gear > 1 and self.manual_transmission:
            self.last_gear -= 1
            self.parked = False
            self.shift_mode_manual = True
        elif not self.last_shift_up_btn and shift_up_btn and self.last_gear >= 1 and self.manual_transmission:
            self.last_gear += 1
            self.parked = False
            self.shift_mode_manual = True

        # Handbrake control
        if self.parked:
            self.last_gear = 0
            self.shift_mode_manual = True
            controls.handbrake = True
        else:
            controls.handbrake = False

        controls.manual_gear = self.last_gear
        controls.manual = self.shift_mode_manual

        # Set the current time if CarControls message includes a header
        # Uncomment the following line if CarControls has a header
        # controls.header.stamp = self.get_clock().now().to_msg()

        controls.gear_immediate = True

        # Update last button states
        self.last_neutral_btn = neutral_btn
        self.last_forward_btn = forward_btn
        self.last_reverse_btn = reverse_btn
        self.last_park_btn = park_btn
        self.last_shift_down_btn = shift_down_btn
        self.last_shift_up_btn = shift_up_btn

        # Publish the car control message
        self.command_pub.publish(controls)

    def run(self):
        rclpy.spin(self)


def main(args=None):
    rclpy.init(args=args)
    node = CarCommandTranslator()
    node.run()
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
