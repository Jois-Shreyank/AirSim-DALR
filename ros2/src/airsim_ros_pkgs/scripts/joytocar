#!/usr/bin/env python3

import rclpy
from rclpy.node import Node

from sensor_msgs.msg import Joy, Image
from airsim_interfaces.msg import CarControls

class MultiCarJoyController(Node):
    def __init__(self):
        super().__init__('multi_car_joy_controller')

        # Declare the parameter for vehicle names
        self.declare_parameter('vehicle_names', ['Car_1', 'Car_2', 'Car_3'])
        self.vehicle_names = self.get_parameter('vehicle_names').value

        # Dictionaries to store publishers and subscribers
        self.vehicle_publishers = {}
        self.subscribers = {}

        # Initialize publishers and subscribers for each vehicle
        for vehicle in self.vehicle_names:
            # Create a publisher for car_cmd
            car_cmd_topic = f'/airsim_node/{vehicle}/car_cmd'
            car_cmd_publisher = self.create_publisher(CarControls, car_cmd_topic, 10)
            self.vehicle_publishers[vehicle] = car_cmd_publisher

            # Create a subscriber for joy
            joy_topic = f'/{vehicle}/joy'
            joy_subscriber = self.create_subscription(
                Joy,
                joy_topic,
                lambda msg, v=vehicle: self.joy_callback(msg, v),
                10)
            self.subscribers[vehicle] = joy_subscriber

            self.get_logger().info(f"Initialized subscriber for {vehicle} on topic {joy_topic}")
            self.get_logger().info(f"Initialized publisher for {vehicle} on topic {car_cmd_topic}")

            self.image_publisher = self.create_publisher(
                Image,
                '/pi_cam/image_raw',
                10
            )
            self.camera_subscriber = self.create_subscription(
                Image,
                '/airsim_node/Car_1/camera/Scene',
                self.camera_callback,
                10
            )
            self.get_logger().info("Initialized camera subscriber for Car_1 and publisher to /pi_cam/image_raw")


    def joy_callback(self, msg, vehicle):
        # Convert Joy message to CarControls message
        controls = CarControls()
        joy = msg

        # Map joystick axes to car controls
        # Adjust these indices based on your joystick configuration

        # Steering
        controls.steering = -joy.axes[0]  # Invert steering if necessary

        # Throttle and Brake
        throttle_brake = joy.axes[1]  # Adjust if necessary
        if throttle_brake > 0.0:
            # Forward
            controls.throttle = throttle_brake
            controls.brake = 0.0
            controls.manual = True
            controls.manual_gear = 1
            controls.gear_immediate = True
        elif throttle_brake < 0.0:
            # Reverse
            controls.throttle = -throttle_brake  # Make positive
            controls.brake = 0.0
            controls.manual = True
            controls.manual_gear = -1
            controls.gear_immediate = True
        else:
            # Brake
            controls.throttle = 0.0
            controls.brake = 1.0
            controls.manual = False

        # Header timestamp
        controls.header.stamp = self.get_clock().now().to_msg()

        # Publish the car controls to the vehicle's car_cmd topic
        self.vehicle_publishers[vehicle].publish(controls)
        self.get_logger().info(f"Published car controls for {vehicle}")
    
    def camera_callback(self, msg):
        # Republish the image message to /pi_cam/image_raw
        self.image_publisher.publish(msg)
        self.get_logger().info("Republished image from Car_1 camera to /pi_cam/image_raw")


def main(args=None):
    rclpy.init(args=args)
    node = MultiCarJoyController()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Shutting down MultiCarJoyController node.")
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
